
Mutations（变更状态）：

Mutations 是 Vuex 中用于修改状态的方法，它是同步的。
Mutations 只能包含同步的代码逻辑，不能处理异步操作。
通过 store.commit('mutationName', payload) 触发 Mutations。
在 Mutations 中直接修改 state 的数据，这是唯一能修改 state 的地方。
Mutations 的目的是保持状态更改的追踪和记录。所有状态的更改都应该通过 Mutations。
Actions（异步操作）：

Actions 是 Vuex 中用于处理异步操作的方法，可以包含异步的代码逻辑。
Actions 不直接修改 state，而是通过触发 Mutations 来间接修改 state 数据。
通过 store.dispatch('actionName', payload) 触发 Actions。
Actions 中可以执行异步操作，例如发送网络请求、定时器、或其他耗时的操作。
完成异步操作后，可以通过触发 Mutations 来更新 state 的数据。
为什么需要区分 Mutations 和 Actions？

Vuex 鼓励使用 Mutations 来修改 state，以便在 DevTools 中可以追踪和记录状态的更改，使得状态管理更加可预测和可维护。

Actions 的主要目的是处理异步操作，例如发送网络请求。由于 Mutations 必须是同步的，所以不能直接在 Mutations 中执行异步操作。




// Vuex store 部分
const store = createStore({
  state() {
    return {
      count: 0,
    };
  },
  mutations: {
    increment(state, payload) {
      state.count += payload;
    },
  },
  actions: {
    async incrementAsync(context, payload) {
      // 在这里执行异步操作，例如发送网络请求
      // 然后触发 mutation 来修改 state 数据
      const response = await api.incrementCount(payload);
      context.commit('increment', response.data);
    },
  },
});

// 在组件中使用
store.commit('increment', 5); // 触发 'increment' mutation，直接同步修改 state
store.dispatch('incrementAsync', 5); // 触发 'incrementAsync' action，处理异步操作并触发 'increment' mutation
