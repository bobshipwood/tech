^向上移动一个记录
~3向上移动多个记录

git branch 分支名                                          在当前head指针下创建分支引用，如果当前具有了一个分支引用（如master），则会产生分叉

移动head指针
git checkout master^                                      以master为基础，head向上移动一次
git checkout 哈希；git checkout HEAD^;        以“哈希”值为基础，向上移动一个记录移动
git checkout HEAD~4;                                    以HEAD为基础，向上移动4次

移动分支方向
git branch -f master HEAD~3；                       以当前head为基础，将master分支向head前3个指向移动
git branch -f master 哈希；                              将master分支向哈希值移动。


回滚工作区
git reset HEAD~1                                         回到HEAD的前一个指向
git revert HEAD                                            删除c2，用c2'提交，其中c2'和c1是一致的。c1->c2->c2'


追加上一次提交的记录
git commit --amend                                     形态上，会丢弃上一次提交的结果，执行命令提交后会形成新的提交id


变基
git rebase -i  哈希或者head                          当前分支下当前head下，以目标哈希或者head^这类的提交id为准，开始往下检索,以交互式的形式，变基另一条分支出来。用于变化提交id的位置，然后再变回来（应用场景为更改图片等），但cherry_pick更好理解。

git rebase 哈希或者head                               丢弃当前分支，在目标id后，产生另一条分支

拉去提交树上的任何提交id
git cherry-pick 哈希                                       会在当前分支下，会产生另一个新的提交id，并以这个提交id为结尾




                                   